a <- available.packages()
head(rownames(a), 3)
install.packages("slidify")
install.packages(c("slidify", "ggplot2", "devtools"))
install.packages("slidify")
install.packages("slidify")
library(ggplot2)
news
install.package("KernSmooth")
install.packages("KernSmooth")
license()
library("KernSmooth")
install.packages("BTYD")
library("BTYD", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("RMySQL")
library(RMySQL)
install.packages("RMySQL")
install.package("RMySQL")
install.packages("RMySQL")
setwd("~/Developer/Git/Data Science/datasciencecoursera")
add2 <- function(x, y) {
x + y
}
add2(3, 5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
n <- 12
above(x, n)
columnMean <- function(y) {
nc <- ncol(y)
means <- numeric(nc) # empty vector with size nc
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
colunMean(airQuality)
columnMean(airquality)
columnMean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc) # empty vector with size nc
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnMean(airQuality)
columnMean(airquality)
source('~/Developer/Git/Data Science/datasciencecoursera/myFirstFunction.R')
x <- 1:10
if(x > 5){}
source('~/Developer/Git/Data Science/datasciencecoursera/myFirstFunction.R')
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
x <- 5
y <- if(x < 3) {}
y <- if(x < 3) { NA } else { 10 }
u
y
source('~/Developer/Git/Data Science/datasciencecoursera/myFirstFunction.R')
source('~/Developer/Git/Data Science/datasciencecoursera/myFirstFunction.R')
source(complete.R)
source("complete.R")
source("pollutantmean.R")
source("corr.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
6
submit()
source('~/Developer/Git/Data Science/datasciencecoursera/corr.R')
submit()
submit()
submit()
source('~/Developer/Git/Data Science/datasciencecoursera/corr.R')
submit()
submit()
submit()
source('~/Developer/Git/Data Science/datasciencecoursera/complete.R')
source('~/Developer/Git/Data Science/datasciencecoursera/complete.R')
submit()
submit()
setwd("~/Developer/Git/ProgrammingAssignment2")
source('~/Developer/Git/ProgrammingAssignment2/cachematrix.R')
m = matrix(1,1)
m
m = matrix(4,4)
m
m = matrix(c(2,3,4,5))
m
m = matrix(c(2,3,4,5), nrow = 2, ncol = 2)
m
makeCacheMatrix(m)
source('~/Developer/Git/ProgrammingAssignment2/cachematrix.R')
source('~/Developer/Git/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(m)
solve(m)
cached = solve(m)]
cached = solve(m)
cached
source('~/Developer/Git/ProgrammingAssignment2/cachematrix.R')
